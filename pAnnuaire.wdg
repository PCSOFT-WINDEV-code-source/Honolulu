#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : pAnnuaire
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x159e26801d1d27fe
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1+
      // Collection de procédures de gestion de l'annuaire
     type : 720896
   -
     code : |1-
      
     type : 720898
  procedures :
   -
     name : EstProfilUtilisateur
     internal_properties : CAAAAAgAAAA++nM8PpfNqbt/to12fscnDO3nlstkwBCOMMAzThgWx3ZlZssnUydsFpreVfPizkuvyr4/YXAhb2wf5AAD8Sh2FBKcAJ9LUfO1ChaPcdaefGPakp/Sr/kHB4BXAS6EA/2uMSTJkBatLKmBbAtC6qA3veTDDW8u6QrvL1GTHoxHdWVjKnAsk8t+eqNfbZk=
     procedure_id : 1557725020307373963
     type_code : 15
     code : |1-
      // Résumé : Indique si un contact est un profil utilisateur
      // Syntaxe :
      //[ <Résultat> = ] EstProfilUtilisateur (<pnIdContact>)
      //
      // Paramètres :
      //	pnIdContact : 	Identifiant du contact à contrôler
      // Valeur de retour :
      // 	booléen : 		VRAI si le contact est un utilisateur, FAUX dans le cas contraire
      //
      // Traitement automatique des erreurs : RENVOYER FAUX
      //
      
      Procédure EstProfilUtilisateur(pnIdContact)
      
      // Variables locales
      bEstUtilisateur		est un booleen
      GUID 				est une chaîne
      
      // Sauvegarde du contexte
      GUID = HFSauvePosition(Contact..nom)
      
      // Par défaut, le contact n'est pas un utilisateur
      bEstUtilisateur = faux
      
      // Lit l'enregistrement
      HLitRecherchePremier(contact,IDContact,pnIdContact)
      si htrouve(contact) ALORS	
      	// Récupère l'information souhaitée
      	bEstUtilisateur = contact.EstUtilisateur	 
      FIN
      
      // Restaure le contexte
      HFRetourPosition(GUID)
      
      // Retourne la valeur récupérée 
      renvoyer bEstUtilisateur
     type : 458752
   -
     name : ProfilRécupèreIdentifiant
     internal_properties : CAAAAAgAAABdQA2XJ6TIsZhQ11qLgdcRlVRngxPzYVEtgHig8MuCJRRa0mt+1nkBd6WCzFc7khJrT2fs4PF470IJmOnP8eNo24AHH2VDS3dEcOmbOavygTCGDNCNEf6dYHEYsgisEPxYOmD3nA65T9eKT+/yQJPEOkrS5scO090RSJAFtnUNwb420L1ffqwYNuF/GA==
     procedure_id : 1557751473202116921
     type_code : 15
     code : |1-
      // Résumé : Récupère l'identifiant de profil (enregistrement "contact") d'un utilisateur
      // Syntaxe :
      //[ <Résultat> = ] ProfilRécupèreIdentifiant (<pnIdUtilisateur>)
      //
      // Paramètres :
      //	pnIdUtilisateur : 	Identifiant de l'utilisateur
      // Valeur de retour :
      // 	entier : 			Identifiant du profil ("contact") pour cet utilisateur
      //
      // Traitement automatique des erreurs : RENVOYER -1
      //
      
      Procédure ProfilRécupèreIdentifiant(pnIdUtilisateur)
      
      // Identifiant de l'enregistrement "contact" correspondant au profil
      nIdentifiantUtilisateur		est un entier
      GUID 						est une chaîne
      
      // Sauvegarde du contexte
      GUID = HFSauvePosition(Contact..nom)
      
      // Par défaut, l'identifiant n'est pas valide
      nIdentifiantUtilisateur	= -1	
      
      // Renseigne l'identifiant utilisateur pour la requête
      REQ_Annuaire_RécupèreProfil.pIdUtilisateur = pnIdUtilisateur
      
      // Exécute la requête
      HExécuteRequête(REQ_Annuaire_RécupèreProfil)
      
      // Lit le résultat de la requête
      hlitpremier(REQ_Annuaire_RécupèreProfil)
      
      // Récupère l'identifiant de contact
      si htrouve alors nIdentifiantUtilisateur = REQ_Annuaire_RécupèreProfil.IDContact
      
      // Restaure le contexte
      HFRetourPosition(GUID)
      
      // Renvoie l'identifiant de profil ("Contact") pour cet utilisateur
      renvoyer nIdentifiantUtilisateur
     type : 458752
   -
     name : ProfilCrée
     internal_properties : CAAAAAgAAABdQA2XJ6TIsZhQ11qLgdcRlVRngxPzYVEtgHig8MuCJRRa0mt+1nkBd6WCzFc7khJrT2fs4PF470IJmOnP8eNo24AHH2VDS3dEcOmbOavygTCGDNCNEf6dYHEYsgisEPxYOmD3nA65T9eKT+/yQJPEOkrS5scO090RSJAFtnUNwb420L1ffqwYNuF/GA==
     procedure_id : 1558830729102296475
     type_code : 15
     code : |1-
      // Résumé : Création d'un profil pour un Utilisateur
      // Syntaxe :
      //[ <Résultat> = ] ProfilCrée (<pnIdUtilisateur>)
      //
      // Paramètres :
      //	pnIdUtilisateur : 	Identifiant de l'Utilisateur pour lequel créer un profil
      // Valeur de retour :
      // 	entier : 			Identifiant de l'enregistrement Contact correspondant au profil, -1 si le profil n'a pas été crée
      //
      // Exemple :
      // // Création du profil de l'Utilisateur en cours
      // CréerProfil(Utilisateur.IDUtilisateur)
      // Traitement automatique des erreurs : RENVOYER -1
      //
      
      Procédure ProfilCrée(pnIdUtilisateur)
      
      // Variables locales
      nIdentifiantProfil 		est un entier
      
      // Contrôle que cet Utilisateur ne possède pas déjà un profil
      si ProfilRécupèreIdentifiant(pnIdUtilisateur) <> -1 ALORS
      	// Affiche un message d'erreur et renvoie -1
      	Erreur(<§@159e267d1d1b1cd30000§>)
      	renvoyer -1	
      FIN
      
      // Sauvegarde du contexte
      GUID est une chaîne = HFSauvePosition(Utilisateur..nom)
      
      // Par défaut, le profil n'a pas d'identifiant
       nIdentifiantProfil = -1
      
      // Lit l'enregistrement Utilisateur
      HLitRecherchePremier(utilisateur, IDUtilisateur, pnIdUtilisateur)
      si htrouve(utilisateur) = faux ALORS	
      	erreur(<§@159e267d1d1b1cd30001§>)
      	// Restaure le contexte
      	HFRetourPosition(GUID)
      	
      	renvoyer -1
      FIN
      
      // Crée le profil pour cet Utilisateur (<=> enregistrement Contact)
      hraz(contact)
      
      // Ce Contact est le profil de l'utilisateur, et est public
      contacT.IDUtilisateur	= pnIdUtilisateur
      contact.EstUtilisateur	= vrai
      contact.EstPublic		= vrai
      
      // Récupère les informations de l'enregistrement Utilisateur
      contact.NomAffiché	= utilisateur.NomAffiché
      contact.nom			= utilisateur.nom
      contact.prenom		= utilisateur.prenom
      contact.email		= utilisateur.email
      Contact.Avatar 		= Utilisateur.Avatar
      
      SI Contact.NomAffiché ~= "" ALORS
      	Contact.NomAffiché = Contact.Prénom + " " + Contact.Nom
      FIN
      
      SI Contact.NomAffiché ~= "" ALORS
      	Contact.NomAffiché = Utilisateur.Login
      FIN
      
      // Si l'Utilisateur n'avait pas d'avatar, attache l'image par défaut
      si contact.avatar = "" alors hattachememo(contact, avatar, fRepWeb() + ["\"] + "ext\avatar-defaut.gif")
      
      // Ajoute l'enregistrement Contact
      SI hajoute(contact) = Faux alors
      	// Restaure le contexte
      	HFRetourPosition(GUID)	
      	RENVOYER -1
      FIN
      
      // Récupère l'identifiant de l'enregistrement Contact crée
      nIdentifiantProfil = contact.IDContact
      
      // Restaure le contexte
      HFRetourPosition(GUID)
      
      // Renvoie l'identifiant du profil de l'Utilisateur
      renvoyer nIdentifiantProfil
     type : 458752
   -
     name : ProfilSupprime
     internal_properties : CAAAAAgAAAA++nM8PpfNqbt/to12fscnDO3nlstkwBCOMMAzThgWx3ZlZssnUydsFpreVfPizkuvyr4/YXAhb2wf5AAD8Sh2FBKcAJ9LUfO1ChaPcdaefGPakp/Sr/kHB4BXAS6EA/2uMSTJkBatLKmBbAtC6qA3veTDDW8u6QrvL1GTHoxHdWVjKnAsk8t+eqNfbZk=
     procedure_id : 1558837854485042488
     type_code : 15
     code : |1+
      // Résumé : Supprime le profil d'un Utilisateur
      // Syntaxe :
      //[ <Résultat> = ] ProfilSupprime (<pnIdUtilisateur>)
      //
      // Paramètres :
      //	pnIdUtilisateur : Identifiant de l'Utilisateur pour lequel le profil doit être supprimé
      // Valeur de retour :
      // 	booléen : 			VRAI si le profil de l'utilisateur a pu être supprimé, FAUX dans le cas contraire
      //
      // Traitement automatique des erreurs : RENVOYER FAUX
      //
      
      Procédure ProfilSupprime(pnIdUtilisateur)
      
      // Variables locales
      nIdentifiantProfil		est un entier
      
      // Récupère l'identifiant du profil de cet Utilisateur
      nIdentifiantProfil = ProfilRécupèreIdentifiant(pnIdUtilisateur)
      
      // Contrôle que cet utilisateur ait bien un profil
      si nIdentifiantProfil = -1 alors
      	erreur(<§@159e267d1d1b1cd30002§>)
      	renvoyer faux
      FIN
      
      // Contrôle que l'enregistrement Contact existe bien
      HLitRecherchePremier(contact,idcontact,nIdentifiantProfil)
      si htrouve(contact) = faux ALORS
      	Erreur(<§@159e267d1d1b1cd30003§>)
      	renvoyer faux	
      FIN
      
      // Supprime l'enregistrement Contact 
      SI HSupprime(contact) = Faux ALORS
      	Erreur(<§@159e267d1d1b1cd30004§>,HErreurInfo())
      	RENVOyer faux
      FIN
      
      // Le profil est supprimé
      renvoyer vrai
     type : 458752
   -
     name : ProfilModifie
     internal_properties : CAAAAAgAAAAg6SxcOtnIQet8oK+xvLjev6mK80pVKODF3XC8Ulhep0/4a9eWfl9/L2PnSjic9GSWSD46aPMTJlBEsAB0PzN3kZ40/tjs59Z5kYxvHlG8c5k03rCDmkkks7EXi9dTi8ZmbZImq9c/VWGGEE2FTf7cvbj5WHT9d1FngvMHg9HxZ8VraOsJ7ZMbpHccWpsM
     procedure_id : 1558909632450286615
     type_code : 15
     code : |1+
      // Résumé : Modification d'un profil pour un Utilisateur : les informations sont reprises de l'enregistrement Utilisateur
      // Syntaxe :
      //[ <Résultat> = ] ProfilModifie (<pnIdUtilisateur>)
      //
      // Paramètres :
      //	pnIdUtilisateur : 	Identifiant de l'Utilisateur pour lequel modifier le profil
      // Valeur de retour :
      // 	booléen : 			VRAI si la modification du profil est effective, FAUX dans le cas contraire
      //
      // Traitement automatique des erreurs : RENVOYER FAUX
      //
      // Traitement automatique des exceptions :   exécuter le bloc de code CAS EXCEPTION:
      //
      
      Procédure ProfilModifie(pnIdUtilisateur)
      
      // Variables locales
      nIdentifiantProfil	est un entier
      
      // Sauvegarde du contexte
      GUID est une chaîne = HFSauvePosition(Utilisateur..nom)
      
      // Lit l'enregistrement Utilisateur
      HLitRecherchePremier(utilisateur, IDUtilisateur, pnIdUtilisateur)
      si htrouve(utilisateur) = faux ALORS
      	erreur(<§@159e267d1d1b1cd30001§>)
      	// Restaure le contexte
      	HFRetourPosition(GUID)
      	
      	renvoyer faux
      FIN
      
      // Récupère l'identifiant du profil pour cet utilisateur
      nIdentifiantProfil = ProfilRécupèreIdentifiant(pnIdUtilisateur)
      
      // Lit l'enregistrement Contact correspondant au profil de cet utilisateur
      HLitRecherchePremier(contact,idcontact,nIdentifiantProfil)
      si htrouve(contact) = faux ALORS
      	// Crée le profil
      	HFRetourPosition(GUID)
      	profilcree(pnIdUtilisateur)
      	renvoyer vrai
      FIN
      
      // Récupère les informations de l'enregistrement Utilisateur
      contact.NomAffiché	= utilisateur.NomAffiché
      contact.nom			= utilisateur.nom
      contact.prenom		= utilisateur.prenom
      contact.email		= utilisateur.email
      Contact.Avatar 		= Utilisateur.Avatar
      
      si Contact.NomAffiché ~= "" alors
      	Contact.NomAffiché = Contact.prenom + " " + Contact.nom
      FIN
      
      SI Contact.NomAffiché ~= "" ALORS
      	Contact.NomAffiché = utilisateur.login
      FIN
      
      // Si l'Utilisateur n'avait pas d'avatar, attache l'image par défaut de l'annuaire
      si contact.avatar = "" alors hattachememo(contact, avatar, fRepWeb() + ["\"] + "ext\avatar-defaut.gif")
      
      // Modifie l'enregistrement Contact
      SI hmodifie(contact) = Faux alors
      	// Restaure le contexte
      	HFRetourPosition(GUID)
      	
      	RENVOYER Faux
      FIN
      
      // Restaure le contexte
      HFRetourPosition(GUID)
      
      // La modification est faite
      renvoyer vrai
      
      CAS EXCEPTION:
      	dbgAssertion(Faux,<§@159e267d1d1b1cd30008§>+Exceptioninfo())
      	// Restaure le contexte
      	HFRetourPosition(GUID)
      
      	RENVOYER Faux
     type : 458752
   -
     name : ContactImporte
     internal_properties : CAAAAAgAAABLAqVz64Dd3RzYAuTcRrejo8LQZXJM8YxogcAYDLK5hgDFbm4XRSGf3OGoXcb40XcGFq6UioKMbXVVEcAq4YBZon3XcPzxJCxb3XBhM4H5OmBKj3Ps4xSEZmth4JfCxMdEAjq2j6xcGL0xTPyYcS/zH/G4vcpLVB4f41koOlcSUaUw6fw62Gcq9Tcvgrkebp/DA+hSW030VPG1XCfunob+78ZA1Nho5QmwKBbbrdkT2c3/LlU4dZZMyka0IxDGPA==
     procedure_id : 1560402752454588073
     type_code : 15
     code : |1-
      // Résumé : Importe une liste de Contacts depuis un fichier formaté
      // Syntaxe :
      //[ <Résultat> = ] ContactImporte (<psFichier> [, <pbIgnorerPremiere>])
      //
      // Paramètres :
      //	psFichier : 		Fichier contenant les contacts à importer
      //	pbIgnorerPremiere (valeur par défaut=1) : VRAI si la première ligne du fichier doit être ignorée, FAUX dans le cas contraire
      // Valeur de retour :
      // 	entier : 			Nombre de contacts importés, -1 en cas d'erreur
      //
      // Traitement automatique des erreurs : RENVOYER FAUX
      //
      
      Procédure ContactImporte(psFichier,pbIgnorerPremiere = vrai)
      
      // Variables locales
      sContenu		est une chaine			// Contenu du fichier
      sUneLigne		est une chaine			// Ligne parcourue
      bPremiereLigne	est un booleen = vrai	// VRAI si la ligne parcourue est la première, FAUX dans le cas contraire
      nNombreImporté	est un entier			// Nombre de Contacts importés
      
      // Contrôle l'existence du fichier
      si fFichierExiste(psFichier) = faux alors renvoyer -1
      
      // Charge le contenu du fichier
      sContenu = fChargeTexte(psFichier)
      
      // Contrôle que le fichier ne soit pas vide
      si sContenu = "" alors renvoyer -1
      
      // Parcours toutes les lignes du fichier
      POUR TOUTE CHAINE sUneLigne DE sContenu SEPAREE PAR RC
      	
      	// Controle que la ligne ne soit pas vide
      	si sUneLigne ~= "" alors continuer
      	
      	// Si le parcours est sur la première ligne et que la première ligne doit être ignorée
      	si bPremiereLigne _et_ pbIgnorerPremiere alors 
      		// Indique que ce n'est plus la première ligne qui est parcourue
      		bPremiereLigne = faux
      		// Continue sur la prochaine ligne
      		continuer
      	FIN
      	
      	// Initialise un enregistrement Contact
      	hraz(contact)
      	
      	// Le Contact appartient à l'utilisateur en cours
      	contact.IDUtilisateur 		= UtilisateurEnCours:IDUtilisateur
      	// Le Contact n'est pas un utilisateur
      	contact.EstUtilisateur		= faux
      	// Le Contat est public par défaut
      	contact.EstPublic			= vrai
      	
      	// Format de la chaine
      	//<Prenom>;<Nom>;<NomAffiché>;<Email>;<Mobile>;<Adresse>;<Ville>;<CodePostal>;<Pays>;<SiteInternet>;<Telephone>;<Fax>;<Société>;<Fonction>;<Commentaires>
      	
      	// Informations nominales
      	Contact.Prénom				= ExtraitChaîne(sUneLigne, 1, ";")
      	contact.Nom					= extraitchaine(sUneLigne, 2, ";")	
      	Contact.NomAffiché			= ExtraitChaîne(sUneLigne, 3, ";")
      		
      	// Informations société
      	Contact.SiteInternet		= ExtraitChaîne(sUneLigne, 10, ";")
      	Contact.Societe				= ExtraitChaîne(sUneLigne, 13, ";")
      	Contact.FonctionPoste		= ExtraitChaîne(sUneLigne, 14, ";")
      	
      	// Informations adresse
      	Contact.Adresse				= ExtraitChaîne(sUneLigne, 6, ";")
      	Contact.CodePostal			= ExtraitChaîne(sUneLigne, 8, ";")
      	Contact.Ville				= ExtraitChaîne(sUneLigne, 7, ";")
      	Contact.Pays				= ExtraitChaîne(sUneLigne, 9, ";")
      		
      	// Informations de contact
      	Contact.Téléphone			= ExtraitChaîne(sUneLigne, 11, ";")
      	Contact.Fax					= ExtraitChaîne(sUneLigne, 12, ";")
      	Contact.mobile				= ExtraitChaîne(sUneLigne, 5, ";")
      	Contact.Email				= ExtraitChaîne(sUneLigne, 4, ";")
      	
      	// Commentaires
      	Contact.Commentaire			= ExtraitChaîne(sUneLigne, 15, ";")
      		
      	// Ajoute le Contact
      	si hajoute(contact) = faux alors
      		Erreur(ChaineConstruit(<§@159e267d1d1b1cd30007§>,ExtraitChaîne(sUneLigne, 3, ";")) ,HErreurInfo())
      	SINON
      		// Incrémente le nombre de Contacts importés
      		nNombreImporté++
      	FIN	
      FIn
      
      // Renvoie le nombre de Contacts importés
      RENVOYER nNombreImporté
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_Collection1
resources :
 string_res :
  identifier : 0x159e267d1d1b1cd3
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
  strings :
   -
     text :
      fr-FR : Cet utilisateur possède déjà un profil.
     index : 0
   -
     text :
      fr-FR : L'enregistrement de cet utilisateur n'a pas été trouvé dans la base.
     index : 1
   -
     text :
      fr-FR : Cet utilisateur n'a pas de profil.
     index : 2
   -
     text :
      fr-FR : L'enregistrement de ce contact n'est pas présent dans la base.
     index : 3
   -
     text :
      fr-FR : Une erreur est survenue pendant la suppression du profil
     index : 4
   -
     text :
      fr-FR : "Une erreur est survenue pendant l'enregistrement du contact : '%1'"
     index : 7
   -
     text :
      fr-FR : "Erreur fatale détectée : "
     index : 8
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
